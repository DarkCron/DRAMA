|----------------------------------------------------------------------
| Vul aan (Beschrijving van 'buffer-overflow' bug)
|----------------------------------------------------------------------
 
| access en passwd op stapel (resp -2(R8) en -8(R8))
| i in R6
main:       HIA.w   R0, -1
            BST     R0
            HIA     R8, R9
            BST     R0
            AFT.w   R9, 1           | -2(R8) bevat access
            HIA.w   R0, 0
            BIG     R0, -2(R8)          | access = 0
            AFT.w   R9, 6           | -8(R8) tot -3(R8) bevat passwd
            HIA.w   R6, 0           | variabele i in main() in R6; i = 0
            
            HIA.w   R0, 0
            HIA.a   R2, -8(R8)      | R2 bevat &passwd[0]
WHILE0:     VGL     R6, MAXLENGTH
            VSP     GRG, EWHILE0    | while( i < MAXLENGTH )
            BIG     R0, 0(R2+)
            OPT.w   R6, 1
            SPR     WHILE0
 
EWHILE0:    HIA.w   R6, 0           | i = 0
            LEZ
            BIG     R0, -8(R8)      | passwd[i] = getint();     
 
WHILE1:     VGL     R6, MAXLENGTH   | while( (i < MAXLENGTH) ...
            VSP     GRG, EWHILE1
            VGL.w   R0, 0           | ... && (passwd[i] != 0))
            VSP     GEL, EWHILE1
            OPT.w   R6, 1           | i++
            LEZ
            HIA.a   R2, -8(R8)
            OPT     R2, R6          | R2 <- &passwd[i]
            BIG     R0, 0(R2)       | passwd[i] = getint()
            SPR     WHILE1
 
EWHILE1:    HIA.a   R0, -8(R8)
            BST     R0
            BST     R8
            HIA     R8, R9
            SBR     encryptAndCheck | encryptAndCheck(passwd)   
            HST     R8
            OPT.w   R9, 1
 
            VGL.w   R0, 1
            VSP     NGEL, EIF
            BIG     R0, -2(R8)      | access = 1
            
EIF:        HIA     R0, -2(R8)
            VGL.w   R0, 1           | if (access == 1)
            VSP     NGEL, DENIED
            HIA.w   R0, 1111
            DRU
            SPR     ENDPROGRAM
 
DENIED:     HIA.w   R0, 0000
            DRU
            SPR     ENDPROGRAM
 

encryptAndCheck:
            | passwd in 1(R8)  (stapel)
            | i in R6
            | j in R5
            | equal in R4
            | R0 = result
|----------------------------------------------------------------------
| TODO: vul aan
|
| int encryptAndCheck(int passwd[]){
|   register int i, j;
|   register int equal;
|
|----------------------------------------------------------------------

|----------------------------------------------------------------------
| TODO: vul aan
|
| equal = 1; 
| i = 0;
| while( i < MAXLENGTH){
|   passwd[i] = passwd[i] + passwd[(i + passwd[i]) % MAXLENGTH];
| 
|   j = 0;
|
|----------------------------------------------------------------------

WHILE4:     VGL     R5, MAXLENGTH
            VSP     GRG, EWHILE4    | while( j < MAXLENGTH )
            HIA     R0, R5
            OPT     R0, 1(R8) 
            HIA     R0, 0(R0)
            DRU                     | printint(passwd[j]
            OPT.w   R5,1
            SPR     WHILE4
EWHILE4:    NWL                     | nieuweLijn()
            OPT.w   R6, 1           | i++

|----------------------------------------------------------------------
| TODO: vul aan
|
| i = 0;
| while( (i < MAXLENGTH) && (equal == 1)){
|   if( internalPasswd[i] != passwd[i] ){
|     equal = 0;
|   }
|   i++;
| }
| return equal;
|
|----------------------------------------------------------------------
            KTG                     | return to main

ENDPROGRAM: STP

MAXLENGTH:  6
INTERNALPASSWD: 3
            6
            9
            10
            15
            12

EINDPR
